{"ast":null,"code":"import axios from \"axios\";\nimport { diaryEntries } from \"./diaryEntries\"; // MANUALLY POPULATE DATA FOR DEMO\n\n// API base URL (adjust according to your setup)\nconst API_URL = \"http://localhost:4001\";\n\n// Send the conversation history to the backend and get the chatbot's response\nexport const sendMessageToChatbot = async messages => {\n  try {\n    const response = await axios.post(`${API_URL}/chat`, {\n      messages\n    });\n    return response.data.response;\n  } catch (error) {\n    console.error(\"Error sending message to chatbot:\", error);\n    throw error;\n  }\n};\n\n// Analyze mood based on conversation text\nexport const analyzeMood = async userInput => {\n  try {\n    const response = await axios.post(`${API_URL}/analyze-mood`, {\n      userInput\n    });\n    return response.data.mood;\n  } catch (error) {\n    console.error(\"Error analyzing mood:\", error);\n    throw error;\n  }\n};\n\n// Save the diary entry to localStorage\nexport const saveDiaryEntry = (date, diaryEntry) => {\n  try {\n    const existingData = JSON.parse(localStorage.getItem(date) || '{}');\n    const updatedData = {\n      ...existingData,\n      ...diaryEntry\n    };\n    localStorage.setItem(date, JSON.stringify(updatedData));\n  } catch (error) {\n    console.error(\"Error saving diary entry:\", error);\n  }\n};\nexport const analyzeSleepAndHealth = async messages => {\n  try {\n    const response = await axios.post(`${API_URL}/analyze-sleep-health`, {\n      messages\n    });\n    return response.data; // { sleepTime: number|null, physicalHealth: \"good\"|\"mid\"|\"bad\"|null }\n  } catch (error) {\n    console.error(\"Error analyzing sleep and health:\", error);\n    return {\n      sleepTime: null,\n      physicalHealth: null\n    };\n  }\n};\nexport const getDiaryEntryForDate = date => {\n  try {\n    // Retrieve the entry for the given date from localStorage\n    const entry = localStorage.getItem(date);\n\n    // If the key doesn't exist or is empty, return null\n    if (!entry) {\n      console.log(\"No diary entry found for this date.\");\n      return null;\n    }\n\n    // Parse the entry data\n    const parsedEntry = JSON.parse(entry);\n\n    // Return only the \"diary\" field, or null if it's not present\n    return parsedEntry;\n  } catch (error) {\n    console.error(\"Error fetching diary entry for date:\", error);\n    return null;\n  }\n};\n// Fetch all diary entries from localStorage\nexport const fetchDiaryEntries = () => {\n  try {\n    const entries = {};\n    for (let i = 0; i < localStorage.length; i++) {\n      const key = localStorage.key(i);\n      if (key.match(/^\\d{4}-\\d{2}-\\d{2}$/)) {\n        // Check if key is a date\n        entries[key] = JSON.parse(localStorage.getItem(key));\n      }\n    }\n    return entries;\n  } catch (error) {\n    console.error(\"Error fetching all diary entries:\", error);\n    return {};\n  }\n};\n\n// MANUALLY POPULATE DATA FOR DEMO\n// export const transcribeAudio = async (audioUrl) => {\n//   try {\n//     const response = await axios.post(`${API_URL}/transcribe`, { audioUrl });\n//     return response.data.text;\n//   } catch (error) {\n//     console.error(\"Error transcribing audio:\", error);\n//     throw error;\n//   }\n// };\n\n// export const getDiaryEntryForDate = (date) => {\n//   try {\n//     const entry = diaryEntries[date];\n//     if (!entry) {\n//       console.log(\"No diary entry found for this date.\");\n//       return null;\n//     }\n//     return entry;\n//   } catch (error) {\n//     console.error(\"Error fetching diary entry for date:\", error);\n//     return null;\n//   }\n// };\n\n// export const fetchDiaryEntries = () => {\n//   try {\n//     return diaryEntries;\n//   } catch (error) {\n//     console.error(\"Error fetching all diary entries:\", error);\n//     return {};\n//   }\n// };","map":{"version":3,"names":["axios","diaryEntries","API_URL","sendMessageToChatbot","messages","response","post","data","error","console","analyzeMood","userInput","mood","saveDiaryEntry","date","diaryEntry","existingData","JSON","parse","localStorage","getItem","updatedData","setItem","stringify","analyzeSleepAndHealth","sleepTime","physicalHealth","getDiaryEntryForDate","entry","log","parsedEntry","fetchDiaryEntries","entries","i","length","key","match"],"sources":["/Users/candicechen/Documents/GitHub/journal-app/frontend/src/utils/api.js"],"sourcesContent":["import axios from \"axios\";\nimport {diaryEntries} from \"./diaryEntries\"; // MANUALLY POPULATE DATA FOR DEMO\n\n// API base URL (adjust according to your setup)\nconst API_URL = \"http://localhost:4001\";\n\n// Send the conversation history to the backend and get the chatbot's response\nexport const sendMessageToChatbot = async (messages) => {\n  try {\n    const response = await axios.post(`${API_URL}/chat`, { messages });\n    return response.data.response;\n  } catch (error) {\n    console.error(\"Error sending message to chatbot:\", error);\n    throw error;\n  }\n};\n\n// Analyze mood based on conversation text\nexport const analyzeMood = async (userInput) => {\n  try {\n    const response = await axios.post(`${API_URL}/analyze-mood`, { userInput });\n    return response.data.mood;\n  } catch (error) {\n    console.error(\"Error analyzing mood:\", error);\n    throw error;\n  }\n};\n\n\n// Save the diary entry to localStorage\nexport const saveDiaryEntry = (date, diaryEntry) => {\n  try {\n    const existingData = JSON.parse(localStorage.getItem(date) || '{}');\n    const updatedData = { ...existingData, ...diaryEntry };\n    localStorage.setItem(date, JSON.stringify(updatedData));\n  } catch (error) {\n    console.error(\"Error saving diary entry:\", error);\n  }\n};\n\n\nexport const analyzeSleepAndHealth = async (messages) => {\n  try {\n    const response = await axios.post(`${API_URL}/analyze-sleep-health`, { messages });\n    return response.data; // { sleepTime: number|null, physicalHealth: \"good\"|\"mid\"|\"bad\"|null }\n  } catch (error) {\n    console.error(\"Error analyzing sleep and health:\", error);\n    return { sleepTime: null, physicalHealth: null };\n  }\n};\n\nexport const getDiaryEntryForDate = (date) => {\n  try {\n    // Retrieve the entry for the given date from localStorage\n    const entry = localStorage.getItem(date);\n\n    // If the key doesn't exist or is empty, return null\n    if (!entry) {\n      console.log(\"No diary entry found for this date.\");\n      return null;\n    }\n\n    // Parse the entry data\n    const parsedEntry = JSON.parse(entry);\n\n    // Return only the \"diary\" field, or null if it's not present\n    return parsedEntry;\n\n  } catch (error) {\n    console.error(\"Error fetching diary entry for date:\", error);\n    return null;\n  }\n};\n// Fetch all diary entries from localStorage\nexport const fetchDiaryEntries = () => {\n  try {\n    const entries = {};\n    for (let i = 0; i < localStorage.length; i++) {\n      const key = localStorage.key(i);\n      if (key.match(/^\\d{4}-\\d{2}-\\d{2}$/)) { // Check if key is a date\n        entries[key] = JSON.parse(localStorage.getItem(key));\n      }\n    }\n    return entries;\n  } catch (error) {\n    console.error(\"Error fetching all diary entries:\", error);\n    return {};\n  }\n};\n\n// MANUALLY POPULATE DATA FOR DEMO\n// export const transcribeAudio = async (audioUrl) => {\n//   try {\n//     const response = await axios.post(`${API_URL}/transcribe`, { audioUrl });\n//     return response.data.text;\n//   } catch (error) {\n//     console.error(\"Error transcribing audio:\", error);\n//     throw error;\n//   }\n// };\n\n\n\n// export const getDiaryEntryForDate = (date) => {\n//   try {\n//     const entry = diaryEntries[date];\n//     if (!entry) {\n//       console.log(\"No diary entry found for this date.\");\n//       return null;\n//     }\n//     return entry;\n//   } catch (error) {\n//     console.error(\"Error fetching diary entry for date:\", error);\n//     return null;\n//   }\n// };\n\n// export const fetchDiaryEntries = () => {\n//   try {\n//     return diaryEntries;\n//   } catch (error) {\n//     console.error(\"Error fetching all diary entries:\", error);\n//     return {};\n//   }\n// };\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAAQC,YAAY,QAAO,gBAAgB,CAAC,CAAC;;AAE7C;AACA,MAAMC,OAAO,GAAG,uBAAuB;;AAEvC;AACA,OAAO,MAAMC,oBAAoB,GAAG,MAAOC,QAAQ,IAAK;EACtD,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAML,KAAK,CAACM,IAAI,CAAC,GAAGJ,OAAO,OAAO,EAAE;MAAEE;IAAS,CAAC,CAAC;IAClE,OAAOC,QAAQ,CAACE,IAAI,CAACF,QAAQ;EAC/B,CAAC,CAAC,OAAOG,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;IACzD,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAME,WAAW,GAAG,MAAOC,SAAS,IAAK;EAC9C,IAAI;IACF,MAAMN,QAAQ,GAAG,MAAML,KAAK,CAACM,IAAI,CAAC,GAAGJ,OAAO,eAAe,EAAE;MAAES;IAAU,CAAC,CAAC;IAC3E,OAAON,QAAQ,CAACE,IAAI,CAACK,IAAI;EAC3B,CAAC,CAAC,OAAOJ,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC7C,MAAMA,KAAK;EACb;AACF,CAAC;;AAGD;AACA,OAAO,MAAMK,cAAc,GAAGA,CAACC,IAAI,EAAEC,UAAU,KAAK;EAClD,IAAI;IACF,MAAMC,YAAY,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAACN,IAAI,CAAC,IAAI,IAAI,CAAC;IACnE,MAAMO,WAAW,GAAG;MAAE,GAAGL,YAAY;MAAE,GAAGD;IAAW,CAAC;IACtDI,YAAY,CAACG,OAAO,CAACR,IAAI,EAAEG,IAAI,CAACM,SAAS,CAACF,WAAW,CAAC,CAAC;EACzD,CAAC,CAAC,OAAOb,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;EACnD;AACF,CAAC;AAGD,OAAO,MAAMgB,qBAAqB,GAAG,MAAOpB,QAAQ,IAAK;EACvD,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAML,KAAK,CAACM,IAAI,CAAC,GAAGJ,OAAO,uBAAuB,EAAE;MAAEE;IAAS,CAAC,CAAC;IAClF,OAAOC,QAAQ,CAACE,IAAI,CAAC,CAAC;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;IACzD,OAAO;MAAEiB,SAAS,EAAE,IAAI;MAAEC,cAAc,EAAE;IAAK,CAAC;EAClD;AACF,CAAC;AAED,OAAO,MAAMC,oBAAoB,GAAIb,IAAI,IAAK;EAC5C,IAAI;IACF;IACA,MAAMc,KAAK,GAAGT,YAAY,CAACC,OAAO,CAACN,IAAI,CAAC;;IAExC;IACA,IAAI,CAACc,KAAK,EAAE;MACVnB,OAAO,CAACoB,GAAG,CAAC,qCAAqC,CAAC;MAClD,OAAO,IAAI;IACb;;IAEA;IACA,MAAMC,WAAW,GAAGb,IAAI,CAACC,KAAK,CAACU,KAAK,CAAC;;IAErC;IACA,OAAOE,WAAW;EAEpB,CAAC,CAAC,OAAOtB,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC;IAC5D,OAAO,IAAI;EACb;AACF,CAAC;AACD;AACA,OAAO,MAAMuB,iBAAiB,GAAGA,CAAA,KAAM;EACrC,IAAI;IACF,MAAMC,OAAO,GAAG,CAAC,CAAC;IAClB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGd,YAAY,CAACe,MAAM,EAAED,CAAC,EAAE,EAAE;MAC5C,MAAME,GAAG,GAAGhB,YAAY,CAACgB,GAAG,CAACF,CAAC,CAAC;MAC/B,IAAIE,GAAG,CAACC,KAAK,CAAC,qBAAqB,CAAC,EAAE;QAAE;QACtCJ,OAAO,CAACG,GAAG,CAAC,GAAGlB,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAACe,GAAG,CAAC,CAAC;MACtD;IACF;IACA,OAAOH,OAAO;EAChB,CAAC,CAAC,OAAOxB,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;IACzD,OAAO,CAAC,CAAC;EACX;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}