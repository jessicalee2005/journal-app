{"ast":null,"code":"var _jsxFileName = \"/Users/candicechen/Documents/GitHub/journal-app/frontend/src/pages/Analytics.js\",\n  _s = $RefreshSig$();\n// import React from \"react\";\n// import {\n//   LineChart,\n//   Line,\n//   XAxis,\n//   YAxis,\n//   CartesianGrid,\n//   Tooltip,\n//   Legend,\n//   ResponsiveContainer,\n// } from \"recharts\";\n// import Calendar from \"react-calendar\";\n// import \"react-calendar/dist/Calendar.css\";\n// import \"./Analytics.css\";\n\n// // Sample data\n// const entryData = [\n//   { time: \"2025-02-01\", mood: \"high\", sleepTime: 8, physicalHealth: \"good\" },\n//   { time: \"2025-02-02\", mood: \"low\", sleepTime: 6, physicalHealth: \"mid\" },\n//   { time: \"2025-02-03\", mood: \"mid\", sleepTime: 7, physicalHealth: \"bad\" },\n// ];\n\n// const Analytics = () => {\n//   const moodData = entryData.map((entry) => ({\n//     time: entry.time,\n//     mood: entry.mood === \"high\" ? 1 : entry.mood === \"low\" ? 0 : 0.5,\n//   }));\n\n//   const sleepData = entryData.map((entry) => ({\n//     time: entry.time,\n//     sleepTime: entry.sleepTime,\n//   }));\n\n//   const healthData = entryData.map((entry) => ({\n//     time: entry.time,\n//     health:\n//       entry.physicalHealth === \"good\"\n//         ? 1\n//         : entry.physicalHealth === \"bad\"\n//         ? 0\n//         : 0.5,\n//   }));\n\n//   const calendarData = entryData.map((entry) => ({\n//     date: entry.time,\n//     healthStatus: entry.physicalHealth,\n//   }));\n\n//   const renderHealthClass = (date) => {\n//     const formattedDate = date.toISOString().split(\"T\")[0]; // Format to 'YYYY-MM-DD'\n\n//     console.log(\"Checking date:\", formattedDate); // Log the date being checked\n\n//     // Find the corresponding entry in calendarData based on the formatted date\n//     const entry = calendarData.find((entry) => entry.date === formattedDate);\n\n//     if (entry) {\n//       console.log(\"Found entry:\", entry); // Log the found entry\n\n//       if (entry.healthStatus === \"good\") return \"green\";\n//       if (entry.healthStatus === \"bad\") return \"red\";\n//       if (entry.healthStatus === \"mid\") return \"yellow\";\n//     }\n\n//     return \"gray\";\n//   };\n\n//   return (\n//     <div className=\"analytics-container\">\n//       <h1 className=\"title\">Analytics</h1>\n\n//       {/* Wrapper div for the charts */}\n//       <div className=\"charts-wrapper\">\n//         {/* Chart 1: Mood Over Time */}\n//         <div className=\"chart-container\">\n//           <h2 className=\"chart-title\">Mood Log</h2>\n//           <ResponsiveContainer width=\"100%\" height=\"100%\">\n//             <LineChart data={moodData}>\n//               <CartesianGrid strokeDasharray=\"3 3\" />\n//               <XAxis dataKey=\"time\" />\n//               <YAxis />\n//               <Tooltip />\n//               <Legend />\n//               <Line type=\"monotone\" dataKey=\"mood\" stroke=\"#8884d8\" />\n//             </LineChart>\n//           </ResponsiveContainer>\n//         </div>\n\n//         {/* Chart 2: Sleep Time Over Time */}\n//         <div className=\"chart-container\">\n//           <h2 className=\"chart-title\">Sleep Log</h2>\n//           <ResponsiveContainer width=\"100%\" height=\"100%\">\n//             <LineChart data={sleepData}>\n//               <CartesianGrid strokeDasharray=\"3 3\" />\n//               <XAxis dataKey=\"time\" />\n//               <YAxis />\n//               <Tooltip />\n//               <Legend />\n//               <Line type=\"monotone\" dataKey=\"sleepTime\" stroke=\"#82ca9d\" />\n//             </LineChart>\n//           </ResponsiveContainer>\n//         </div>\n\n//         {/* Chart 3: Physical Health Over Time */}\n//         <div className=\"chart-container\">\n//           <h2 className=\"chart-title\">Physical Log</h2>\n//           <ResponsiveContainer width=\"100%\" height=\"100%\">\n//             <LineChart data={healthData}>\n//               <CartesianGrid strokeDasharray=\"3 3\" />\n//               <XAxis dataKey=\"time\" />\n//               <YAxis />\n//               <Tooltip />\n//               <Legend />\n//               <Line type=\"monotone\" dataKey=\"health\" stroke=\"#ff7300\" />\n//             </LineChart>\n//           </ResponsiveContainer>\n//         </div>\n\n//         {/* Chart 4: Health Status Calendar */}\n//         <div className=\"calendar-container\">\n//           <h2 className=\"chart-title\">Health Status Calendar</h2>\n//           <div className=\"calendar-chart\">\n//             <Calendar tileClassName={({ date }) => renderHealthClass(date)} />\n//           </div>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Analytics;\n\nimport React, { useEffect, useState } from \"react\";\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from \"recharts\";\nimport Calendar from \"react-calendar\";\nimport \"react-calendar/dist/Calendar.css\";\nimport \"./Analytics.css\";\nimport { fetchDiaryEntries, analyzeSleepAndHealth } from \"./api\"; // Import the new function\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Analytics = () => {\n  _s();\n  const [chartData, setChartData] = useState([]);\n  useEffect(() => {\n    const fetchAndAnalyzeData = async () => {\n      // Fetch all diary entries from localStorage\n      const entries = fetchDiaryEntries();\n\n      // Transform entries into chart data with sleep and health analysis\n      const transformedData = await Promise.all(Object.keys(entries).map(async date => {\n        const entry = entries[date];\n        const {\n          mood,\n          conversation\n        } = entry;\n\n        // Analyze sleep and health from conversation\n        const {\n          sleepTime,\n          physicalHealth\n        } = await analyzeSleepAndHealth(conversation);\n\n        // Quantify mood (scale: 0 to 1), default to Neutral (0.5) if null\n        const moodValue = mood === null || mood === undefined ? 0.5 : {\n          Happy: 1,\n          Excited: 0.9,\n          Neutral: 0.5,\n          Anxious: 0.3,\n          Angry: 0.2,\n          Sad: 0.1\n        }[mood] || 0.5;\n\n        // Use analyzed sleep time (hours), default to 0 if null\n        const sleepTimeValue = sleepTime === null || sleepTime === undefined ? 0 : sleepTime;\n\n        // Quantify physical health (scale: 0 to 1), default to mid (0.5) if null\n        const healthValue = physicalHealth === null || physicalHealth === undefined ? 0.5 : {\n          good: 1,\n          mid: 0.5,\n          bad: 0\n        }[physicalHealth] || 0.5;\n        return {\n          time: date,\n          mood: moodValue,\n          sleepTime: sleepTimeValue,\n          physicalHealth: healthValue,\n          healthStatus: physicalHealth === null || physicalHealth === undefined ? \"mid\" : physicalHealth\n        };\n      }));\n      setChartData(transformedData);\n    };\n    fetchAndAnalyzeData();\n  }, []);\n\n  // Data for each chart\n  const moodData = chartData.map(entry => ({\n    time: entry.time,\n    mood: entry.mood\n  }));\n  const sleepData = chartData.map(entry => ({\n    time: entry.time,\n    sleepTime: entry.sleepTime\n  }));\n  const healthData = chartData.map(entry => ({\n    time: entry.time,\n    health: entry.physicalHealth\n  }));\n  const calendarData = chartData.map(entry => ({\n    date: entry.time,\n    healthStatus: entry.healthStatus\n  }));\n  const renderHealthClass = date => {\n    const formattedDate = date.toISOString().split(\"T\")[0]; // Format to 'YYYY-MM-DD'\n    const entry = calendarData.find(entry => entry.date === formattedDate);\n    if (entry) {\n      if (entry.healthStatus === \"good\") return \"green\";\n      if (entry.healthStatus === \"bad\") return \"red\";\n      if (entry.healthStatus === \"mid\") return \"yellow\";\n    }\n    return \"gray\";\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"analytics-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title\",\n      children: \"Analytics\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"charts-wrapper\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"chart-title\",\n          children: \"Mood Log\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n          width: \"100%\",\n          height: \"100%\",\n          children: /*#__PURE__*/_jsxDEV(LineChart, {\n            data: moodData,\n            children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n              strokeDasharray: \"3 3\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 250,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n              dataKey: \"time\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 251,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n              domain: [0, 1],\n              ticks: [0, 0.1, 0.2, 0.3, 0.5, 0.9, 1]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 252,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n              formatter: value => {\n                if (value === 1) return \"Happy\";\n                if (value === 0.9) return \"Excited\";\n                if (value === 0.5) return \"Neutral\";\n                if (value === 0.3) return \"Anxious\";\n                if (value === 0.2) return \"Angry\";\n                if (value === 0.1) return \"Sad\";\n                return \"Unknown\";\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 253,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 262,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Line, {\n              type: \"monotone\",\n              dataKey: \"mood\",\n              stroke: \"#8884d8\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 263,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 249,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"chart-title\",\n          children: \"Sleep Log\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n          width: \"100%\",\n          height: \"100%\",\n          children: /*#__PURE__*/_jsxDEV(LineChart, {\n            data: sleepData,\n            children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n              strokeDasharray: \"3 3\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 273,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n              dataKey: \"time\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 274,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n              domain: [0, 12]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 275,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n              formatter: value => `${value} hours`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 276,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 277,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Line, {\n              type: \"monotone\",\n              dataKey: \"sleepTime\",\n              stroke: \"#82ca9d\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 278,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 272,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"chart-title\",\n          children: \"Physical Log\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n          width: \"100%\",\n          height: \"100%\",\n          children: /*#__PURE__*/_jsxDEV(LineChart, {\n            data: healthData,\n            children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n              strokeDasharray: \"3 3\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 288,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n              dataKey: \"time\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 289,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n              domain: [0, 1],\n              ticks: [0, 0.5, 1]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 290,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n              formatter: value => value === 1 ? \"Good\" : value === 0 ? \"Bad\" : \"Mid\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 291,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 292,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Line, {\n              type: \"monotone\",\n              dataKey: \"health\",\n              stroke: \"#ff7300\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 293,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 287,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"calendar-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"chart-title\",\n          children: \"Health Status Calendar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"calendar-chart\",\n          children: /*#__PURE__*/_jsxDEV(Calendar, {\n            tileClassName: ({\n              date\n            }) => renderHealthClass(date)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 302,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 301,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 241,\n    columnNumber: 5\n  }, this);\n};\n_s(Analytics, \"Leo9Xk/Ki5G6SkYc3yZESo07mWw=\");\n_c = Analytics;\nexport default Analytics;\nvar _c;\n$RefreshReg$(_c, \"Analytics\");","map":{"version":3,"names":["React","useEffect","useState","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","Calendar","fetchDiaryEntries","analyzeSleepAndHealth","jsxDEV","_jsxDEV","Analytics","_s","chartData","setChartData","fetchAndAnalyzeData","entries","transformedData","Promise","all","Object","keys","map","date","entry","mood","conversation","sleepTime","physicalHealth","moodValue","undefined","Happy","Excited","Neutral","Anxious","Angry","Sad","sleepTimeValue","healthValue","good","mid","bad","time","healthStatus","moodData","sleepData","healthData","health","calendarData","renderHealthClass","formattedDate","toISOString","split","find","className","children","fileName","_jsxFileName","lineNumber","columnNumber","width","height","data","strokeDasharray","dataKey","domain","ticks","formatter","value","type","stroke","tileClassName","_c","$RefreshReg$"],"sources":["/Users/candicechen/Documents/GitHub/journal-app/frontend/src/pages/Analytics.js"],"sourcesContent":["// import React from \"react\";\n// import {\n//   LineChart,\n//   Line,\n//   XAxis,\n//   YAxis,\n//   CartesianGrid,\n//   Tooltip,\n//   Legend,\n//   ResponsiveContainer,\n// } from \"recharts\";\n// import Calendar from \"react-calendar\";\n// import \"react-calendar/dist/Calendar.css\";\n// import \"./Analytics.css\";\n\n// // Sample data\n// const entryData = [\n//   { time: \"2025-02-01\", mood: \"high\", sleepTime: 8, physicalHealth: \"good\" },\n//   { time: \"2025-02-02\", mood: \"low\", sleepTime: 6, physicalHealth: \"mid\" },\n//   { time: \"2025-02-03\", mood: \"mid\", sleepTime: 7, physicalHealth: \"bad\" },\n// ];\n\n// const Analytics = () => {\n//   const moodData = entryData.map((entry) => ({\n//     time: entry.time,\n//     mood: entry.mood === \"high\" ? 1 : entry.mood === \"low\" ? 0 : 0.5,\n//   }));\n\n//   const sleepData = entryData.map((entry) => ({\n//     time: entry.time,\n//     sleepTime: entry.sleepTime,\n//   }));\n\n//   const healthData = entryData.map((entry) => ({\n//     time: entry.time,\n//     health:\n//       entry.physicalHealth === \"good\"\n//         ? 1\n//         : entry.physicalHealth === \"bad\"\n//         ? 0\n//         : 0.5,\n//   }));\n\n//   const calendarData = entryData.map((entry) => ({\n//     date: entry.time,\n//     healthStatus: entry.physicalHealth,\n//   }));\n\n//   const renderHealthClass = (date) => {\n//     const formattedDate = date.toISOString().split(\"T\")[0]; // Format to 'YYYY-MM-DD'\n\n//     console.log(\"Checking date:\", formattedDate); // Log the date being checked\n\n//     // Find the corresponding entry in calendarData based on the formatted date\n//     const entry = calendarData.find((entry) => entry.date === formattedDate);\n\n//     if (entry) {\n//       console.log(\"Found entry:\", entry); // Log the found entry\n\n//       if (entry.healthStatus === \"good\") return \"green\";\n//       if (entry.healthStatus === \"bad\") return \"red\";\n//       if (entry.healthStatus === \"mid\") return \"yellow\";\n//     }\n\n//     return \"gray\";\n//   };\n\n//   return (\n//     <div className=\"analytics-container\">\n//       <h1 className=\"title\">Analytics</h1>\n\n//       {/* Wrapper div for the charts */}\n//       <div className=\"charts-wrapper\">\n//         {/* Chart 1: Mood Over Time */}\n//         <div className=\"chart-container\">\n//           <h2 className=\"chart-title\">Mood Log</h2>\n//           <ResponsiveContainer width=\"100%\" height=\"100%\">\n//             <LineChart data={moodData}>\n//               <CartesianGrid strokeDasharray=\"3 3\" />\n//               <XAxis dataKey=\"time\" />\n//               <YAxis />\n//               <Tooltip />\n//               <Legend />\n//               <Line type=\"monotone\" dataKey=\"mood\" stroke=\"#8884d8\" />\n//             </LineChart>\n//           </ResponsiveContainer>\n//         </div>\n\n//         {/* Chart 2: Sleep Time Over Time */}\n//         <div className=\"chart-container\">\n//           <h2 className=\"chart-title\">Sleep Log</h2>\n//           <ResponsiveContainer width=\"100%\" height=\"100%\">\n//             <LineChart data={sleepData}>\n//               <CartesianGrid strokeDasharray=\"3 3\" />\n//               <XAxis dataKey=\"time\" />\n//               <YAxis />\n//               <Tooltip />\n//               <Legend />\n//               <Line type=\"monotone\" dataKey=\"sleepTime\" stroke=\"#82ca9d\" />\n//             </LineChart>\n//           </ResponsiveContainer>\n//         </div>\n\n//         {/* Chart 3: Physical Health Over Time */}\n//         <div className=\"chart-container\">\n//           <h2 className=\"chart-title\">Physical Log</h2>\n//           <ResponsiveContainer width=\"100%\" height=\"100%\">\n//             <LineChart data={healthData}>\n//               <CartesianGrid strokeDasharray=\"3 3\" />\n//               <XAxis dataKey=\"time\" />\n//               <YAxis />\n//               <Tooltip />\n//               <Legend />\n//               <Line type=\"monotone\" dataKey=\"health\" stroke=\"#ff7300\" />\n//             </LineChart>\n//           </ResponsiveContainer>\n//         </div>\n\n//         {/* Chart 4: Health Status Calendar */}\n//         <div className=\"calendar-container\">\n//           <h2 className=\"chart-title\">Health Status Calendar</h2>\n//           <div className=\"calendar-chart\">\n//             <Calendar tileClassName={({ date }) => renderHealthClass(date)} />\n//           </div>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Analytics;\n\nimport React, { useEffect, useState } from \"react\";\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n} from \"recharts\";\nimport Calendar from \"react-calendar\";\nimport \"react-calendar/dist/Calendar.css\";\nimport \"./Analytics.css\";\nimport { fetchDiaryEntries, analyzeSleepAndHealth } from \"./api\"; // Import the new function\n\nconst Analytics = () => {\n  const [chartData, setChartData] = useState([]);\n\n  useEffect(() => {\n    const fetchAndAnalyzeData = async () => {\n      // Fetch all diary entries from localStorage\n      const entries = fetchDiaryEntries();\n\n      // Transform entries into chart data with sleep and health analysis\n      const transformedData = await Promise.all(\n        Object.keys(entries).map(async (date) => {\n          const entry = entries[date];\n          const { mood, conversation } = entry;\n\n          // Analyze sleep and health from conversation\n          const { sleepTime, physicalHealth } = await analyzeSleepAndHealth(conversation);\n\n          // Quantify mood (scale: 0 to 1), default to Neutral (0.5) if null\n          const moodValue = mood === null || mood === undefined\n            ? 0.5\n            : {\n                Happy: 1,\n                Excited: 0.9,\n                Neutral: 0.5,\n                Anxious: 0.3,\n                Angry: 0.2,\n                Sad: 0.1,\n              }[mood] || 0.5;\n\n          // Use analyzed sleep time (hours), default to 0 if null\n          const sleepTimeValue = sleepTime === null || sleepTime === undefined ? 0 : sleepTime;\n\n          // Quantify physical health (scale: 0 to 1), default to mid (0.5) if null\n          const healthValue = physicalHealth === null || physicalHealth === undefined\n            ? 0.5\n            : {\n                good: 1,\n                mid: 0.5,\n                bad: 0,\n              }[physicalHealth] || 0.5;\n\n          return {\n            time: date,\n            mood: moodValue,\n            sleepTime: sleepTimeValue,\n            physicalHealth: healthValue,\n            healthStatus: physicalHealth === null || physicalHealth === undefined ? \"mid\" : physicalHealth,\n          };\n        })\n      );\n\n      setChartData(transformedData);\n    };\n\n    fetchAndAnalyzeData();\n  }, []);\n\n  // Data for each chart\n  const moodData = chartData.map((entry) => ({\n    time: entry.time,\n    mood: entry.mood,\n  }));\n\n  const sleepData = chartData.map((entry) => ({\n    time: entry.time,\n    sleepTime: entry.sleepTime,\n  }));\n\n  const healthData = chartData.map((entry) => ({\n    time: entry.time,\n    health: entry.physicalHealth,\n  }));\n\n  const calendarData = chartData.map((entry) => ({\n    date: entry.time,\n    healthStatus: entry.healthStatus,\n  }));\n\n  const renderHealthClass = (date) => {\n    const formattedDate = date.toISOString().split(\"T\")[0]; // Format to 'YYYY-MM-DD'\n    const entry = calendarData.find((entry) => entry.date === formattedDate);\n\n    if (entry) {\n      if (entry.healthStatus === \"good\") return \"green\";\n      if (entry.healthStatus === \"bad\") return \"red\";\n      if (entry.healthStatus === \"mid\") return \"yellow\";\n    }\n\n    return \"gray\";\n  };\n\n  return (\n    <div className=\"analytics-container\">\n      <h1 className=\"title\">Analytics</h1>\n\n      <div className=\"charts-wrapper\">\n        {/* Chart 1: Mood Over Time */}\n        <div className=\"chart-container\">\n          <h2 className=\"chart-title\">Mood Log</h2>\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\n            <LineChart data={moodData}>\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis dataKey=\"time\" />\n              <YAxis domain={[0, 1]} ticks={[0, 0.1, 0.2, 0.3, 0.5, 0.9, 1]} />\n              <Tooltip formatter={(value) => {\n                if (value === 1) return \"Happy\";\n                if (value === 0.9) return \"Excited\";\n                if (value === 0.5) return \"Neutral\";\n                if (value === 0.3) return \"Anxious\";\n                if (value === 0.2) return \"Angry\";\n                if (value === 0.1) return \"Sad\";\n                return \"Unknown\";\n              }} />\n              <Legend />\n              <Line type=\"monotone\" dataKey=\"mood\" stroke=\"#8884d8\" />\n            </LineChart>\n          </ResponsiveContainer>\n        </div>\n\n        {/* Chart 2: Sleep Time Over Time */}\n        <div className=\"chart-container\">\n          <h2 className=\"chart-title\">Sleep Log</h2>\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\n            <LineChart data={sleepData}>\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis dataKey=\"time\" />\n              <YAxis domain={[0, 12]} />\n              <Tooltip formatter={(value) => `${value} hours`} />\n              <Legend />\n              <Line type=\"monotone\" dataKey=\"sleepTime\" stroke=\"#82ca9d\" />\n            </LineChart>\n          </ResponsiveContainer>\n        </div>\n\n        {/* Chart 3: Physical Health Over Time */}\n        <div className=\"chart-container\">\n          <h2 className=\"chart-title\">Physical Log</h2>\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\n            <LineChart data={healthData}>\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis dataKey=\"time\" />\n              <YAxis domain={[0, 1]} ticks={[0, 0.5, 1]} />\n              <Tooltip formatter={(value) => (value === 1 ? \"Good\" : value === 0 ? \"Bad\" : \"Mid\")} />\n              <Legend />\n              <Line type=\"monotone\" dataKey=\"health\" stroke=\"#ff7300\" />\n            </LineChart>\n          </ResponsiveContainer>\n        </div>\n\n        {/* Chart 4: Health Status Calendar */}\n        <div className=\"calendar-container\">\n          <h2 className=\"chart-title\">Health Status Calendar</h2>\n          <div className=\"calendar-chart\">\n            <Calendar tileClassName={({ date }) => renderHealthClass(date)} />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Analytics;"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SACEC,SAAS,EACTC,IAAI,EACJC,KAAK,EACLC,KAAK,EACLC,aAAa,EACbC,OAAO,EACPC,MAAM,EACNC,mBAAmB,QACd,UAAU;AACjB,OAAOC,QAAQ,MAAM,gBAAgB;AACrC,OAAO,kCAAkC;AACzC,OAAO,iBAAiB;AACxB,SAASC,iBAAiB,EAAEC,qBAAqB,QAAQ,OAAO,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAElE,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EAE9CD,SAAS,CAAC,MAAM;IACd,MAAMmB,mBAAmB,GAAG,MAAAA,CAAA,KAAY;MACtC;MACA,MAAMC,OAAO,GAAGT,iBAAiB,CAAC,CAAC;;MAEnC;MACA,MAAMU,eAAe,GAAG,MAAMC,OAAO,CAACC,GAAG,CACvCC,MAAM,CAACC,IAAI,CAACL,OAAO,CAAC,CAACM,G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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}