{"ast":null,"code":"import axios from \"axios\";\n\n// API base URL (adjust according to your setup)\nconst API_URL = \"http://localhost:4001\";\n\n// Send the conversation history to the backend and get the chatbot's response\nexport const sendMessageToChatbot = async messages => {\n  try {\n    const response = await axios.post(`${API_URL}/chat`, {\n      messages\n    });\n    return response.data.response;\n  } catch (error) {\n    console.error(\"Error sending message to chatbot:\", error);\n    throw error;\n  }\n};\n\n// Analyze mood based on conversation text\nexport const analyzeMood = async userInput => {\n  try {\n    const response = await axios.post(`${API_URL}/analyze-mood`, {\n      userInput\n    });\n    return response.data.mood;\n  } catch (error) {\n    console.error(\"Error analyzing mood:\", error);\n    throw error;\n  }\n};\n\n// Save the diary entry to localStorage\nexport const saveDiaryEntry = (date, diaryEntry) => {\n  try {\n    const existingData = JSON.parse(localStorage.getItem(date) || '{}');\n    const updatedData = {\n      ...existingData,\n      ...diaryEntry\n    };\n    localStorage.setItem(date, JSON.stringify(updatedData));\n  } catch (error) {\n    console.error(\"Error saving diary entry:\", error);\n  }\n};\n\n// Fetch diary entry for a specific date from localStorage\nexport const getDiaryEntryForDate = date => {\n  try {\n    const entry = JSON.parse(localStorage.getItem(date) || '{}');\n    return Object.keys(entry).length > 0 ? entry : null;\n  } catch (error) {\n    console.error(\"Error fetching diary entry for date:\", error);\n    return null;\n  }\n};\n\n// Fetch all diary entries from localStorage\nexport const fetchDiaryEntries = () => {\n  try {\n    const entries = {};\n    for (let i = 0; i < localStorage.length; i++) {\n      const key = localStorage.key(i);\n      if (key.match(/^\\d{4}-\\d{2}-\\d{2}$/)) {\n        // Check if key is a date\n        entries[key] = JSON.parse(localStorage.getItem(key));\n      }\n    }\n    return entries;\n  } catch (error) {\n    console.error(\"Error fetching all diary entries:\", error);\n    return {};\n  }\n};\nexport const transcribeAudio = async audioUrl => {\n  try {\n    const response = await axios.post(`${API_URL}/transcribe`, {\n      audioUrl\n    });\n    return response.data.text;\n  } catch (error) {\n    console.error(\"Error transcribing audio:\", error);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","API_URL","sendMessageToChatbot","messages","response","post","data","error","console","analyzeMood","userInput","mood","saveDiaryEntry","date","diaryEntry","existingData","JSON","parse","localStorage","getItem","updatedData","setItem","stringify","getDiaryEntryForDate","entry","Object","keys","length","fetchDiaryEntries","entries","i","key","match","transcribeAudio","audioUrl","text"],"sources":["/Users/jessicalee/Documents/GitHub/journal-app/frontend/src/utils/api.js"],"sourcesContent":["import axios from \"axios\";\n\n// API base URL (adjust according to your setup)\nconst API_URL = \"http://localhost:4001\";\n\n// Send the conversation history to the backend and get the chatbot's response\nexport const sendMessageToChatbot = async (messages) => {\n  try {\n    const response = await axios.post(`${API_URL}/chat`, { messages });\n    return response.data.response;\n  } catch (error) {\n    console.error(\"Error sending message to chatbot:\", error);\n    throw error;\n  }\n};\n\n// Analyze mood based on conversation text\nexport const analyzeMood = async (userInput) => {\n  try {\n    const response = await axios.post(`${API_URL}/analyze-mood`, { userInput });\n    return response.data.mood;\n  } catch (error) {\n    console.error(\"Error analyzing mood:\", error);\n    throw error;\n  }\n};\n\n// Save the diary entry to localStorage\nexport const saveDiaryEntry = (date, diaryEntry) => {\n  try {\n    const existingData = JSON.parse(localStorage.getItem(date) || '{}');\n    const updatedData = { ...existingData, ...diaryEntry };\n    localStorage.setItem(date, JSON.stringify(updatedData));\n  } catch (error) {\n    console.error(\"Error saving diary entry:\", error);\n  }\n};\n\n// Fetch diary entry for a specific date from localStorage\nexport const getDiaryEntryForDate = (date) => {\n  try {\n    const entry = JSON.parse(localStorage.getItem(date) || '{}');\n    return Object.keys(entry).length > 0 ? entry : null;\n  } catch (error) {\n    console.error(\"Error fetching diary entry for date:\", error);\n    return null;\n  }\n};\n\n// Fetch all diary entries from localStorage\nexport const fetchDiaryEntries = () => {\n  try {\n    const entries = {};\n    for (let i = 0; i < localStorage.length; i++) {\n      const key = localStorage.key(i);\n      if (key.match(/^\\d{4}-\\d{2}-\\d{2}$/)) { // Check if key is a date\n        entries[key] = JSON.parse(localStorage.getItem(key));\n      }\n    }\n    return entries;\n  } catch (error) {\n    console.error(\"Error fetching all diary entries:\", error);\n    return {};\n  }\n};\n\nexport const transcribeAudio = async (audioUrl) => {\n  try {\n    const response = await axios.post(`${API_URL}/transcribe`, { audioUrl });\n    return response.data.text;\n  } catch (error) {\n    console.error(\"Error transcribing audio:\", error);\n    throw error;\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}