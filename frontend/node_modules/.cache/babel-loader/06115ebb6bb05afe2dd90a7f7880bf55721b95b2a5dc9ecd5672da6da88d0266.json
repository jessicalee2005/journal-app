{"ast":null,"code":"var _jsxFileName = \"/Users/candicechen/Documents/GitHub/journal-app/frontend/src/pages/Home.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport \"./Home.css\";\nimport left from \"../assets/left.png\";\nimport right from \"../assets/right.png\";\nimport sad from \"../assets/sad.jpg\";\nimport happy from \"../assets/happy.jpeg\";\nimport mid from \"../assets/mid.jpg\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst images = [sad, happy, mid];\nconst monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\nfunction Home() {\n  _s();\n  const [currentDate, setCurrentDate] = useState(new Date());\n  const [selectedDay, setSelectedDay] = useState(null); // Store selected day\n  const [currEntry, setCurrEntry] = useState(null); // Store selected day\n  const [modalOpen, setModalOpen] = useState(false); // Manage modal visibility\n\n  // Descriptions for each day (just an example, you can customize)\n  const descriptions = {\n    1: \"Description for day 1\",\n    2: \"Description for day 2\",\n    3: \"Description for day 3\"\n    // Add descriptions for each day\n  };\n  const handlePrevMonth = () => {\n    setCurrentDate(new Date(currentDate.getFullYear(), currentDate.getMonth() - 1, 1));\n  };\n  const handleNextMonth = () => {\n    setCurrentDate(new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 1));\n  };\n  const getDaysInMonth = (year, month) => new Date(year, month + 1, 0).getDate();\n  const handleDayClick = (day, entries) => {\n    setSelectedDay(day); // Set the selected day\n    setCurrEntry(entries);\n    setModalOpen(true); // Open the modal\n  };\n  const renderDaysGrid = () => {\n    const year = currentDate.getFullYear();\n    const month = currentDate.getMonth();\n    const daysInMonth = getDaysInMonth(year, month);\n    const firstDayOfMonth = new Date(year, month, 1).getDay();\n    const days = [];\n    for (let i = 0; i < firstDayOfMonth; i++) {\n      days.push(/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"day empty\"\n      }, `empty-${i}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this)); // Fix key generation\n    }\n    for (let day = 1; day <= daysInMonth; day++) {\n      const randomImage = images[Math.floor(Math.random() * images.length)]; // Random image selection\n      const date_key = `${year}-${month}-${day}`;\n      const entries = getDiaryEntryForDate(date_key);\n      const disabled = false;\n      if (entries == null) {\n        disabled = true;\n      }\n      days.push(/*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: disabled,\n        className: \"day\",\n        onClick: () => handleDayClick(date_key, entries) // Make each day clickable\n        ,\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: randomImage,\n          alt: `Day ${day}`,\n          className: \"day-image\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"day-number\",\n          children: day\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, this)]\n      }, day, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this));\n    }\n    return days;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"home-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"month-navigation\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handlePrevMonth,\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: left,\n          alt: \"Previous Month\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [monthNames[currentDate.getMonth()], \" \", currentDate.getFullYear()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleNextMonth,\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: right,\n          alt: \"Next Month\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"calendar-grid\",\n      children: renderDaysGrid()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), modalOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [monthNames[currentDate.getMonth()], \" \", selectedDay, \",\", \" \", currentDate.getFullYear()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: currEntry || \"No description available.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"modal-button\",\n          onClick: () => setModalOpen(false),\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n}\n_s(Home, \"c5GCByp0ez0r9Iy4Ltqd2zX8m70=\");\n_c = Home;\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["useState","left","right","sad","happy","mid","jsxDEV","_jsxDEV","images","monthNames","Home","_s","currentDate","setCurrentDate","Date","selectedDay","setSelectedDay","currEntry","setCurrEntry","modalOpen","setModalOpen","descriptions","handlePrevMonth","getFullYear","getMonth","handleNextMonth","getDaysInMonth","year","month","getDate","handleDayClick","day","entries","renderDaysGrid","daysInMonth","firstDayOfMonth","getDay","days","i","push","className","fileName","_jsxFileName","lineNumber","columnNumber","randomImage","Math","floor","random","length","date_key","getDiaryEntryForDate","disabled","onClick","children","src","alt","_c","$RefreshReg$"],"sources":["/Users/candicechen/Documents/GitHub/journal-app/frontend/src/pages/Home.js"],"sourcesContent":["import { useState } from \"react\";\nimport \"./Home.css\";\nimport left from \"../assets/left.png\";\nimport right from \"../assets/right.png\";\nimport sad from \"../assets/sad.jpg\";\nimport happy from \"../assets/happy.jpeg\";\nimport mid from \"../assets/mid.jpg\";\n\nconst images = [sad, happy, mid];\n\nconst monthNames = [\n  \"January\",\n  \"February\",\n  \"March\",\n  \"April\",\n  \"May\",\n  \"June\",\n  \"July\",\n  \"August\",\n  \"September\",\n  \"October\",\n  \"November\",\n  \"December\",\n];\n\nfunction Home() {\n  const [currentDate, setCurrentDate] = useState(new Date());\n  const [selectedDay, setSelectedDay] = useState(null); // Store selected day\n  const [currEntry, setCurrEntry] = useState(null); // Store selected day\n  const [modalOpen, setModalOpen] = useState(false); // Manage modal visibility\n\n  // Descriptions for each day (just an example, you can customize)\n  const descriptions = {\n    1: \"Description for day 1\",\n    2: \"Description for day 2\",\n    3: \"Description for day 3\",\n    // Add descriptions for each day\n  };\n\n  const handlePrevMonth = () => {\n    setCurrentDate(\n      new Date(currentDate.getFullYear(), currentDate.getMonth() - 1, 1)\n    );\n  };\n\n  const handleNextMonth = () => {\n    setCurrentDate(\n      new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 1)\n    );\n  };\n\n  const getDaysInMonth = (year, month) =>\n    new Date(year, month + 1, 0).getDate();\n\n  const handleDayClick = (day, entries) => {\n    setSelectedDay(day); // Set the selected day\n    setCurrEntry(entries);\n    \n    setModalOpen(true); // Open the modal\n  };\n\n  const renderDaysGrid = () => {\n    const year = currentDate.getFullYear();\n    const month = currentDate.getMonth();\n    const daysInMonth = getDaysInMonth(year, month);\n    const firstDayOfMonth = new Date(year, month, 1).getDay();\n\n    const days = [];\n\n    for (let i = 0; i < firstDayOfMonth; i++) {\n      days.push(<div key={`empty-${i}`} className=\"day empty\"></div>); // Fix key generation\n    }\n\n    for (let day = 1; day <= daysInMonth; day++) {\n      const randomImage = images[Math.floor(Math.random() * images.length)]; // Random image selection\n      const date_key = `${year}-${month}-${day}`;\n      const entries = getDiaryEntryForDate(date_key);\n      const disabled = false;\n      if (entries == null) {\n        disabled = true\n      }\n\n      days.push(\n        <button\n          key={day}\n          disabled={disabled}\n          className=\"day\"\n          onClick={() => handleDayClick(date_key, entries)} // Make each day clickable\n        >\n          <img src={randomImage} alt={`Day ${day}`} className=\"day-image\" />{\" \"}\n          {/* Fix alt syntax */}\n          <div className=\"day-number\">{day}</div>\n        </button>\n      );\n    }\n\n    return days;\n  };\n\n  return (\n    <div className=\"home-page\">\n      <div className=\"month-navigation\">\n        <button onClick={handlePrevMonth}>\n          <img src={left} alt=\"Previous Month\" />\n        </button>\n        <h1>\n          {monthNames[currentDate.getMonth()]} {currentDate.getFullYear()}\n        </h1>\n        <button onClick={handleNextMonth}>\n          <img src={right} alt=\"Next Month\" />\n        </button>\n      </div>\n\n      <div className=\"calendar-grid\">{renderDaysGrid()}</div>\n\n      {/* Modal Popup */}\n      {modalOpen && (\n        <div className=\"modal\">\n          <div className=\"modal-content\">\n            <h2>\n              {monthNames[currentDate.getMonth()]} {selectedDay},{\" \"}\n              {currentDate.getFullYear()}\n            </h2>\n            <p>{currEntry || \"No description available.\"}</p>\n            <button\n              className=\"modal-button\"\n              onClick={() => setModalOpen(false)}\n            >\n              Close\n            </button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default Home;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}